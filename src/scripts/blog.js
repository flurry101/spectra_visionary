class BlogManager{constructor(){this.allBlogs=[],this.initElements(),this.loadBlogs()}initElements(){this.blogGrid=document.querySelector(".blog-grid"),this.searchInput=document.getElementById("blog-search"),this.filterButtons=document.querySelectorAll(".filter-btn"),this.modalContainer=document.getElementById("blog-post-modal"),this.modalContent=this.modalContainer.querySelector("#full-blog-content"),this.setupSearchListener(),this.setupFilterListeners(),this.setupModalClose()}setupModalClose(){this.modalContainer.querySelector(".close-modal").addEventListener("click",()=>{this.modalContainer.classList.remove("open")})}async loadBlogs(){try{const t=import.meta.glob("/src/blog/**/*.md"),e=Object.entries(t).map(async([t,e])=>{try{const n=await e();if(!n.attributes||!n.attributes.title)return console.warn(`Skipping blog post: Missing required attributes in ${t}`),null;const s=t.split("/"),o=s[s.indexOf("blog")+1]||"uncategorized";return{...n.attributes,content:n.html,category:o,path:t}}catch(e){return console.error(`Error loading blog post from ${t}:`,e),null}});this.allBlogs=(await Promise.all(e)).filter(t=>null!==t),this.allBlogs.sort((t,e)=>new Date(e.date)-new Date(t.date)),this.renderBlogs(this.allBlogs)}catch(t){console.error("Error loading blog posts:",t)}}renderBlogs(t){this.blogGrid.innerHTML="",t.forEach(t=>{const e=document.createElement("article");e.classList.add("blog-post"),e.dataset.category=t.category,e.innerHTML=`\n                <div class="blog-post-image">\n                    <img src="${t.thumbnail||"/default-blog-image.jpg"}" alt="${t.title}">\n                </div>\n                <div class="blog-content">\n                    <h3>${t.title}</h3>\n                    <div class="blog-meta">\n                        <span>${t.author}</span>\n                        <span>${new Date(t.date).toLocaleDateString()}</span>\n                    </div>\n                    <p>${this.truncateContent(t.content)}</p>\n                    <button class="read-more" data-path="${t.path}">Read More</button>\n                </div>\n            `,e.querySelector(".read-more").addEventListener("click",()=>this.openBlogModal(t)),this.blogGrid.appendChild(e)})}setupSearchListener(){this.searchInput&&this.searchInput.addEventListener("input",this.debounceSearch.bind(this))}debounceSearch(){const t=this.searchInput.value.toLowerCase().trim();if(t.length<2)return void this.renderBlogs(this.allBlogs);const e=this.allBlogs.filter(e=>e.title.toLowerCase().includes(t)||e.category.toLowerCase().includes(t)||e.tags&&e.tags.some(e=>e.toLowerCase().includes(t))||e.content.toLowerCase().includes(t));this.renderBlogs(e)}setupFilterListeners(){this.filterButtons.forEach(t=>{t.addEventListener("click",()=>{this.filterButtons.forEach(t=>t.classList.remove("active")),t.classList.add("active");const e=t.dataset.category,n="all"===e?this.allBlogs:this.allBlogs.filter(t=>t.category===e);this.renderBlogs(n)})})}openBlogModal(t){this.modalContent.innerHTML=`\n            <div class="modal-header">\n                <h2>${t.title}</h2>\n                <div class="blog-meta">\n                    <span>By ${t.author}</span>\n                    <span>${new Date(t.date).toLocaleDateString()}</span>\n                    <span>Category: ${t.category}</span>\n                </div>\n            </div>\n            <div class="blog-full-content">${t.content}</div>\n        `,this.modalContainer.classList.add("open")}truncateContent(t,e=200){const n=t.replace(/<[^>]*>/g,"");return n.length>e?n.substring(0,e)+"...":n}}document.addEventListener("DOMContentLoaded",()=>{new BlogManager});